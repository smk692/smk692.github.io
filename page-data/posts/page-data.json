{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"b35d3736-f50f-5609-8bc8-de677881cf32","excerpt":"🔖 서론 만드는법은 이전글을 참고 해주세요. 이번에는 간단하게 쿠버네티스 실습 하려고합니다. https://github.com/smk692/kubernetes-summarize 코드는 위의 링크에 있으며 간단한 실습 내용이라 안되는 부분은 댓글로 부탁드리겠습니다. 🖋️ 실습 GCP Kubernetes Engine Pod 생성 및 수정 시작 전 테스트  명령어 시 에러가 날 경우 이전 블로그 글을 확인해주세요. 1. git clone 을 진행해주세요. 준비물: deployment.yaml 2. 디렉토리 위치 변경 3. pod 생성  GCP Kubernetes Engine 잘 생성된걸 확인 할 수 있습니다.  스크린샷과 같이 뜨면 Pod 생성이 완료! 4. pod 변경 위에서 확인한 Name 으로 변경을 진행합니다.  저장 시  수정이되었다고 호출됩니다.  스크린샷과 같이 뜨면 Pod 변경이 완료! 5. pod 삭제 yaml 에서 이미 replicas 지정했기 때문에 삭제되어도 새로운 …","fields":{"slug":"/infra/gcp-kubernetes-2/content/"},"frontmatter":{"categories":"인프라","title":"☸️ Kubernetes 배포가 Google Cloud Platform에서 쉬움 모드 Step2 : 초보자를 위한 단계별 실습","date":"April 30, 2023"}},"next":{"fields":{"slug":"/infra/gcp-kubernetes-1/content/"}},"previous":null},{"node":{"id":"ff641d6c-08c5-5d45-a7fb-0260e9b5c0ec","excerpt":"GCP Kubernetes 생성하기 (무료 Creatdit 사용) 1. Google.com 에서 GCP 라고 입력 후 검색 후 무료 등록을 클릭한다.  2. 무료로 시작 하기 클릭.  3. 결제 정보를 입력해주세요. 만약 입력하지 않을 경우 서비스 사용이 제한됩니다.  4. 입력 완료 후 왼쪽 상단의 메뉴바 클릭 하면 아래와 같은 스크린샷이 나옵니다.  5. 클러스터 생성 클릭 하면 아래와 같은 화면이 나옵니다.  6. 일단 Default 로 만들기 때문에 쭉쭉 다음을 눌러주세요.  7. 약 7분 ~ 10분 정도 소요된 후 생성이 완료됩니다.  Local Kubernetes 설치 하는 법 https://kubernetes.io/ko/docs/tasks/tools/install-kubectl-macos/ GCP Kubernetes Local 연동 하는법 https://cloud.google.com/sdk/docs/install?hl=ko Mac GCP CLI를 설치하는 법 GCP C…","fields":{"slug":"/infra/gcp-kubernetes-1/content/"},"frontmatter":{"categories":"인프라","title":"☸️ Kubernetes 배포가 Google Cloud Platform에서 쉬움 모드 Step1 : 초보자를 위한 단계별 가이드","date":"April 29, 2023"}},"next":{"fields":{"slug":"/CS/backend-interview2/"}},"previous":{"fields":{"slug":"/infra/gcp-kubernetes-2/content/"}}},{"node":{"id":"44335ff4-ccb3-5c39-80bc-fa88dfee0cc5","excerpt":"👿백엔드 개발 면접 질문2 👿백엔드 개발 면접에는 가장 일반적인 답변을 원하는 기본적인 질문과 우리가 함께할 수 있도록 도움을 줄 수 있는 기타 질문들이 있다. 1. 백엔드에서 가장 많이 사용하는 언어는 무엇인가요? 대부분의 백엔드에서는 Java, Python, Ruby, Kotlin, Node.js 등을 사용합니다. 이 중에서 Java가 가장 많이 사용됩니다. Java는 객체 지향 프로그래밍 언어이며, 안정성과 확장성이 높아 대규모 애플리케이션에 적합합니다. 하지만 Kotlin 많이 이관하는 추세입니다. 2. REST API와 SOAP의 차이점은 무엇인가요? REST API는 HTTP 프로토콜을 사용하고, SOAP는 XML을 사용합니다. 또한 REST API는 간결하고 가벼우며, SOAP는 보안이 강화되고 표준화된 인터페이스를 제공합니다. REST API는 간단하고 확장성이 뛰어나며, 사용이 쉽지만, 복잡한 트랜잭션을 처리하는데는 한계가 있습니다. 반면 SOAP는 보안성과 안정성…","fields":{"slug":"/CS/backend-interview2/"},"frontmatter":{"categories":"CS","title":"👿백엔드 개발 면접 질문2","date":"April 26, 2023"}},"next":{"fields":{"slug":"/CS/backend-interview/"}},"previous":{"fields":{"slug":"/infra/gcp-kubernetes-1/content/"}}},{"node":{"id":"46bcece5-c3be-5d2d-84d7-0482be6b47ff","excerpt":"👿백엔드 개발 면접에는 가장 일반적인 답변을 원하는 기본적인 질문과 우리가 함께할 수 있도록 도움을 줄 수 있는 기타 질문들이 있다. 기본적인 면접 질문 귀하의 개발 스택과 경험 등에 관해 이야기해주시겠습니까? 당신의 가장 잘하는 분야와 개발 노하우는 무엇입니까? 개발 경험과 현업 경험, 왜 그것을 선택했습니까? 개발 실력을 밝히는 질문 당신이 개발할 때 어떤 디자인패턴과 테스트 프레임 워크를 사용합니까? REST API, SOAP 및 Microservice 개발에 대한 경험이 있습니까? 고객이 기대하는 솔루션에 대해 설명해주시겠습니까? 1. Java에서 다형성(Polymorphism)이란 무엇인가요? 다형성은 객체 지향 프로그래밍에서 하나의 메서드나 클래스가 다양한 형태를 갖는 것을 말합니다. Java에서는 메서드 오버로딩, 메서드 오버라이딩, 상속 등의 기능으로 다형성을 구현할 수 있습니다. 2. 자바에서 오버로딩(Overloading)과 오버라이딩(Overriding)의 차이…","fields":{"slug":"/CS/backend-interview/"},"frontmatter":{"categories":"CS","title":"👿백엔드 개발 면접 질문1","date":"April 25, 2023"}},"next":{"fields":{"slug":"/infra/terraform-standard/contents/"}},"previous":{"fields":{"slug":"/CS/backend-interview2/"}}},{"node":{"id":"477baeb0-8398-5f44-8c02-bdbd09dd1172","excerpt":"📒 테라폼(Terraform) 이란? 테라폼(Terraform)은 인프라스트럭처를 코드로 관리하기 위한 오픈소스 도구입니다.\nAWS, Google Cloud Platform, Microsoft Azure 등 다양한 클라우드 서비스 및 온프레미스 인프라를 지원하며, 코드로 인프라를 구성하고 변경사항을 추적, 관리할 수 있습니다. 테라폼을 사용하는 이유는 다음과 같습니다. 장점: 코드로 인프라를 관리하기 때문에, 반복적이고 일관성 있는 인프라 구성이 가능합니다. 코드 관리 도구(Git 등)를 사용하여 변경 이력을 추적하고, 이력에 따라 인프라를 복원할 수 있습니다. 다양한 클라우드 서비스 및 온프레미스 인프라를 지원하며, 인프라 복잡도가 높아지더라도 코드로 관리할 수 있습니다. 테라폼은 인프라를 변경할 때 새로운 인프라를 만들고 이전 인프라를 제거하는 방식으로 변경사항을 적용합니다. 이를 통해 변경사항 적용 중에도 인프라의 안정성을 유지할 수 있습니다. 단점: 학습 곡선이 높습니다. …","fields":{"slug":"/infra/terraform-standard/contents/"},"frontmatter":{"categories":"인프라","title":"테라폼(Terraform) 기초의 모든것!","date":"April 25, 2023"}},"next":{"fields":{"slug":"/infra/terraform-standard/eks/"}},"previous":{"fields":{"slug":"/CS/backend-interview/"}}},{"node":{"id":"ed3a35a6-abd3-50a0-843a-27162547b3c3","excerpt":"서론 Kubernetes 이해 쿠버네티스는 컨테이너화된 워크로드와 서비스를 관리하기 위한 이식성이 있고, 확장가능한 오픈소스 플랫폼이다. 쿠버네티스는 선언적 구성과 자동화를 모두 용이하게 해준다. 쿠버네티스는 크고, 빠르게 성장하는 생태계를 가지고있다.\n쿠버네티스 서비스, 기술 지원 및 도구는 어디서나 쉽게 이용할 수 있다. eks-1.png EKS 무엇인가요? EKS는 아마존 웹 서비스에서 제공하는 관리형 Kubernetes 서비스입니다. Kubernetes는 컨테이너 오케스트레이션 플랫폼으로, 대규모 애플리케이션을 배포, 확장 및 관리하는 데 사용됩니다. EKS를 사용하면 Kubernetes 클러스터를 쉽게 배포하고 관리할 수 있습니다. EKS를 사용하는 이유는 다음과 같습니다. 관리형 서비스: EKS는 Kubernetes 마스터를 자동으로 프로비저닝하고 관리하므로 사용자는 클러스터 관리에 집중할 필요가 없습니다. 확장성: EKS는 AWS의 다른 서비스와 통합되어 확장성이 높은…","fields":{"slug":"/infra/terraform-standard/eks/"},"frontmatter":{"categories":"terraform 자동화","title":"테라폼(Terraform) 기초의 모든것!","date":"April 25, 2023"}},"next":{"fields":{"slug":"/blog-post-automation/contents/"}},"previous":{"fields":{"slug":"/infra/terraform-standard/contents/"}}},{"node":{"id":"ee182bf0-8369-5781-b944-d36cd901f768","excerpt":"🚀 블로그를 왜 써야 하는지?! 개발자는 기술 블로그를 통해 자신의 경험을 공유하고, 다른 개발자들과 지식을 공유하며 성장할 수 있습니다. 또한, 블로그를 운영함으로써 자신의 프로젝트나 포트폴리오를 보다 쉽게 공유하고, 개인 브랜딩에도 도움이 됩니다. 솔직하게 광고로 얼마를 벌 수 있는지 한번 심심해서 시작했습니다. ㅎㅎㅎ… 개발에 대해 살짝이라도 알고 계시면 추천 합니다! 🔨 준비물이 무엇이 필요한지?! 자동화된 Git Blog를 운영하기 위해 필요한 준비물은 다음과 같습니다. Git 계정 및 블로그 호스팅 플랫폼 (e.g. GitHub, GitLab, Bitbucket, Gitea 등) 정적 사이트 생성기 (e.g. Jekyll, Hugo, Pelican 등) 마크다운 에디터 (e.g. Typora, Visual Studio Code 등) 자동화 스크립트 (e.g. GitHub Actions, Travis CI 등) 🧐 블로그 글을 자동화 하는방법 !? 블로그를 자동화하는 방법…","fields":{"slug":"/blog-post-automation/contents/"},"frontmatter":{"categories":"블로그 featured 자동화","title":"🚀 Git Blog 자동화 하는법","date":"April 24, 2023"}},"next":{"fields":{"slug":"/infra/kafka/kafka/"}},"previous":{"fields":{"slug":"/infra/terraform-standard/eks/"}}},{"node":{"id":"d4c4a5e6-3dac-5e56-90e3-13168d739b87","excerpt":"Kafka Broker Kafka Broker Apache Kafka의 핵심 요소 중 하나로, Kafka 메시지 시스템에서 매우 중요한 역할을 합니다. Kafka Broker는 메시지를 수신하고, 저장하며, 클라이언트 애플리케이션으로 전달하는 역할을 수행합니다. Kafka Broker는 Kafka 클러스터의 브로커 노드 중 하나이며, 여러 대의 브로커 노드로 구성된 분산 시스템입니다. Kafka Broker는 특정 토픽의 파티션에 할당되며, 해당 파티션에 속한 메시지를 저장하고 처리합니다. 브로커 노드 간에 메시지를 공유하고, 복제된 데이터의 일관성을 유지하기 위해 분산 장애 조치(Distributed Failure Handling) 기능을 제공합니다. Kafka Broker는 디스크와 메모리를 사용하여 메시지를 저장하고 처리합니다. 메시지는 디스크에 영속적으로 저장되고, 메모리에서 처리됩니다. 또한, Kafka Broker는 여러 가지 데이터 처리 기능을 제공하며, 다른 분산 데…","fields":{"slug":"/infra/kafka/kafka/"},"frontmatter":{"categories":"kafka","title":"kafka broker, topic, partition 내용 및 사용 사례","date":"April 23, 2023"}},"next":{"fields":{"slug":"/infra/kafka/confluent-kafka/"}},"previous":{"fields":{"slug":"/blog-post-automation/contents/"}}},{"node":{"id":"30bd6ed5-4585-57b2-b17a-27b579aa747f","excerpt":"1. Confluent Kafka는 다음과 같은 장점을 가지고 있습니다. 빠른 속도: Confluent Kafka는 빠른 속도로 메시징을 제공합니다. 메시징 솔루션을 사용하는 경우 빠른 속도는 중요한 요소입니다. 안정적인 데이터 스트리밍: Confluent Kafka는 데이터 스트리밍을 안정적으로 제공합니다. 데이터 스트리밍을 사용하는 경우 안정적인 솔루션이 필요합니다. 다양한 데이터 처리: Confluent Kafka는 다양한 종류의 데이터를 처리하기 위해 사용됩니다. 다양한 종류의 데이터를 처리하기 위해 메시징 시스템이 필요합니다. 2. Confluent Kafka의 사용 사례 Confluent Kafka는 다음과 같은 사용 사례가 있습니다. 데이터 스트리밍: Confluent Kafka는 데이터 스트리밍을 위해 사용됩니다. 데이터 스트리밍을 위해 빠르고 안정적인 메시징 솔루션이 필요합니다. 분산 메시징 시스템: Confluent Kafka는 다양한 종류의 데이터를 처리하기 위…","fields":{"slug":"/infra/kafka/confluent-kafka/"},"frontmatter":{"categories":"kafka","title":"confluent kafka 내용 및 사용 사례","date":"April 23, 2023"}},"next":{"fields":{"slug":"/infra/kafka/kafka-aws-msk/"}},"previous":{"fields":{"slug":"/infra/kafka/kafka/"}}},{"node":{"id":"b9a6e80b-e5f0-5326-9f35-ca7dc331a4ab","excerpt":"개요 **Amazon Managed Streaming for Apache Kafka (Amazon MSK)**은 Apache Kafka를 관리하기 위한 AWS의 완전 관리형 서비스입니다. Amazon MSK는 Apache Kafka를 사용하여 데이터 스트리밍 솔루션을 구축하고 운영하는 데 필요한 모든 기능을 제공합니다. Amazon MSK는 사용자가 직접 관리하거나 운영할 필요가 없으며, 사용자는 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 집중할 수 있습니다. 장점 자동화된 관리: Amazon MSK는 사용자가 직접 관리하거나 운영할 필요가 없으며, 사용자는 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 집중할 수 있습니다. 안정적인 성능: Amazon MSK는 사용자가 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 필요한 안정적인 성능을 제공합니다. 간편한 사용: Amazon MSK는 사용자가 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 필요한 간편한 사용을 …","fields":{"slug":"/infra/kafka/kafka-aws-msk/"},"frontmatter":{"categories":"kafka","title":"Kafka AWS MSK 내용 및 사용 사례","date":"April 22, 2023"}},"next":{"fields":{"slug":"/java/garbage-collection/"}},"previous":{"fields":{"slug":"/infra/kafka/confluent-kafka/"}}},{"node":{"id":"78a23573-2773-506c-b9a9-2c2fbd57f5cc","excerpt":"# 자바 가비지 컬렉터에 대한 중요한 사항 자바 가비지 컬렉터에 대한 중요한 사항 자바 가비지 컬렉터(Garbage Collector)는 객체들을 자동으로 수거하여 메모리 누수 방지 및 소멸된 객체들를 최적화하는 작업을 수행함으로써 JVM 메모리 관리를 용이하게 해줍니다.\n이 글에서는 자바 가비지 컬렉터의 기능, 사용 방법, 그리고 자주 발생하는 문제점과 그 대처법에 대해 간단하게 살펴볼 것입니다. 이 글은 10분 이내로 짧게 작성되었습니다. 자바 가비지 컬렉터 활용에 따른 두 가지 주요 이점을 꼽을 수 있습니다. 첫 번째는 소멸된 객체들이 새로운 객체로 대체되기 때문에 메모리 누수가 발생하지 않는다는 것입니다. 두 번째로는 메모리를 최적화하여 JVM 속도를 높이는 것입니다. 하지만 자바 가비지 컬렉터를 사용하면서 발생할 수 있는 문제도 있습니다. 대표적으로는 프로그램 실행 중 잠복상태(Pause)가 발생하는 것이 있습니다. 이 발생한 잠복상태는 여러 이유로 인해 발생할 수 있으며…","fields":{"slug":"/java/garbage-collection/"},"frontmatter":{"categories":"java","title":"자바 가비지 컬렉터에 대한 중요한 사항","date":"April 21, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/infra/kafka/kafka-aws-msk/"}}},{"node":{"id":"550f2d0d-0b71-54ed-b023-89191fa4f521","excerpt":"제 블로그의 테마나 Gatsby의 다른 테마를 활용해서 Github Blog를 만들고 싶은 분들이 계실텐데요! 이런 분들에게 도움을 드리고자 이 글을 쓰게 되었습니다. 잘 안되는 부분이나 궁금한 점을 댓글로 남겨주면 확인해보고 답변 드리도록 하겠습니다! 1. Repository 생성하기 GitHub Blog를 만들려면 Github에 Repository를 생성해야 합니다.  GitHub에 로그인 한 뒤에 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성 페이지로 이동하게 됩니다. 이 때 Import a repository 버튼을 클릭합니다.  아래 페이지에 도달하시면 두 가지 정보를 넣어주셔야 하는데, Your old repository’s clone URL에는 사용하고자 하는 gatsby 테마가 있는 repository의 주소를 넣어주시면 됩니다. 제 블로그 테마를 쓰고 싶으신 분들은 여기에 https://github.com/zoomKoding/…","fields":{"slug":"/gatsby-github-blog/"},"frontmatter":{"categories":"featured","title":"Gatsby 테마로 GitHub Blog 만들기","date":"July 06, 2021"}},"next":{"fields":{"slug":"/gatsby-starter-soncoding-introduction/"}},"previous":{"fields":{"slug":"/java/garbage-collection/"}}},{"node":{"id":"72880dcf-10dd-5c8d-90b1-e89e551d43b7","excerpt":"👋 소개 블로그를 직접 운영하면서 조금씩 그려봤던 이상적인 개발 블로그 테마를 Gatsby를 통해 만들어보게 되었습니다. 이 테마가 블로그를 운영하고자 하시는 분들에게 자신의 이야기를 잘 담을 수 있는 공간이 되었으면 좋겠습니다.🙌 블로그 테마가 맘에 드셨다면 아래 과정을 통해 자신의 블로그를 만들어보시길 바랍니다! 혹시 만드시는 과정에서 궁금하신 점이나 어려움이 있으시다면 이슈를 통해 문의 남겨주세요! 스타는 블로그 테마를 지속적으로 발전시키는데 큰 힘이 됩니다!⭐️ 🚀 시작하기 Github Page나 Netlify 중 원하시는 배포 환경에 따라 다음 과정을 진행하시면 빠르게 블로그를 만드실 수 있습니다. 🦖 GitHub Page로 만들기 깃헙 페이지를 통해 블로그를 만드시다면 아래 글을 참고해주세요! Gatsby 테마로 GitHub Blog 만들기 🔧 Netlify로 만들기 아래 버튼을 활용하면 개인 계정에 를 사용하고 있는 Repository 생성과 Netlify에 배포를 동시…","fields":{"slug":"/gatsby-starter-soncoding-introduction/"},"frontmatter":{"categories":"블로그","title":"쉽고 빠르게 나만의 개츠비(Gatsby) 블로그 만들기","date":"March 22, 2021"}},"next":null,"previous":{"fields":{"slug":"/gatsby-github-blog/"}}}],"categories":["All","인프라","CS","terraform","자동화","블로그","featured","kafka","java"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}