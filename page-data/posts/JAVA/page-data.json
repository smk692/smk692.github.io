{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/JAVA",
    "result": {"pageContext":{"currentCategory":"JAVA","categories":["All","KAFKA","JAVA","featured","블로그"],"edges":[{"node":{"id":"16ff6381-a3d2-5f47-9252-71454b0e0f2d","excerpt":"# DDD 테스트 코드 작성 방법 DDD(Domain-Driven Design) 테스트 코드 작성은 비교적 새로운 기법이지만 소프트웨어 개발을 하는데 많은 도움이 됩니다. 개발자들은 일반적인 테스트 코드 작성과 달리 DDD 테스트 코드 작성 방법에 대해 더 신중하게 고민해야 합니다. DDD 테스트 코드 작성 방법에 대한 정의 DDD(Domain-Driven Design) 테스트 코드 개발은 기본 개발 과정과는 달리 개발을 위해 만들어진 도메인, 제품, 데이터모델과 같은 미리 정의된 모델을 사용합니다. 이는 개발 시에 점진적인 개발이 가능하게 해줍니다. 기본적으로 DDD 테스트 코드 작성 방법과는 다르게 개발에 대하여 다양한 요구사항과 의사 결정이 먼저 들어가게 됩니다. DDD 테스트 코드 작성의 장단점 DDD 테스트 코드 작성 방법은 기존의 개발 방법과 차이가 있지만 관련된 장단점이 있습니다. 장점 다른 시스템과 연동하기 쉽다. 빠른 시간 안에 기능을 추가할 수 있다. 개발 시간이…","fields":{"slug":"/2023-04-21/ddd-테스트-코드-작성-방법-17:33:01/"},"frontmatter":{"categories":"JAVA","title":"DDD 테스트 코드 작성 방법 ","date":"April 21, 2023"}},"next":{"fields":{"slug":"/2023-04-21/자바-가비지-컬렉터에-대한-중요한-사항16:55:46/"}},"previous":{"fields":{"slug":"/2023-04-22/kafka(msk)-정리-및-사용-사례04:19:18/"}}},{"node":{"id":"d3ae6c28-0ef8-524e-8c40-8e9483469b34","excerpt":"# 자바 가비지 컬렉터에 대한 중요한 사항 자바 가비지 컬렉터에 대한 중요한 사항 자바 가비지 컬렉터(Garbage Collector)는 객체들을 자동으로 수거하여 메모리 누수 방지 및 소멸된 객체들를 최적화하는 작업을 수행함으로써 JVM 메모리 관리를 용이하게 해줍니다.\n이 글에서는 자바 가비지 컬렉터의 기능, 사용 방법, 그리고 자주 발생하는 문제점과 그 대처법에 대해 간단하게 살펴볼 것입니다. 이 글은 10분 이내로 짧게 작성되었습니다. 자바 가비지 컬렉터 활용에 따른 두 가지 주요 이점을 꼽을 수 있습니다. 첫 번째는 소멸된 객체들이 새로운 객체로 대체되기 때문에 메모리 누수가 발생하지 않는다는 것입니다. 두 번째로는 메모리를 최적화하여 JVM 속도를 높이는 것입니다. 하지만 자바 가비지 컬렉터를 사용하면서 발생할 수 있는 문제도 있습니다. 대표적으로는 프로그램 실행 중 잠복상태(Pause)가 발생하는 것이 있습니다. 이 발생한 잠복상태는 여러 이유로 인해 발생할 수 있으며…","fields":{"slug":"/2023-04-21/자바-가비지-컬렉터에-대한-중요한-사항16:55:46/"},"frontmatter":{"categories":"JAVA","title":"자바 가비지 컬렉터에 대한 중요한 사항","date":"April 21, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/2023-04-21/ddd-테스트-코드-작성-방법-17:33:01/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}