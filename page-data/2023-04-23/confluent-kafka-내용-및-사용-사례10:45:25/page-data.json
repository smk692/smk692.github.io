{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/2023-04-23/confluent-kafka-내용-및-사용-사례10:45:25/",
    "result": {"data":{"cur":{"id":"216ac529-ae14-5bff-9d1d-3dde55ac98f4","html":"<h2 id=\"1-confluent-kafka는-다음과-같은-장점을-가지고-있습니다\" style=\"position:relative;\"><a href=\"#1-confluent-kafka%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EC%9E%A5%EC%A0%90%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"1 confluent kafka는 다음과 같은 장점을 가지고 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Confluent Kafka는 다음과 같은 장점을 가지고 있습니다.</h2>\n<ul>\n<li>빠른 속도: Confluent Kafka는 빠른 속도로 메시징을 제공합니다. 메시징 솔루션을 사용하는 경우 빠른 속도는 중요한 요소입니다.</li>\n<li>안정적인 데이터 스트리밍: Confluent Kafka는 데이터 스트리밍을 안정적으로 제공합니다. 데이터 스트리밍을 사용하는 경우 안정적인 솔루션이 필요합니다.</li>\n<li>다양한 데이터 처리: Confluent Kafka는 다양한 종류의 데이터를 처리하기 위해 사용됩니다. 다양한 종류의 데이터를 처리하기 위해 메시징 시스템이 필요합니다.</li>\n</ul>\n<h2 id=\"2-confluent-kafka의-사용-사례\" style=\"position:relative;\"><a href=\"#2-confluent-kafka%EC%9D%98-%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80\" aria-label=\"2 confluent kafka의 사용 사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Confluent Kafka의 사용 사례</h2>\n<p>Confluent Kafka는 다음과 같은 사용 사례가 있습니다.</p>\n<ul>\n<li>데이터 스트리밍: Confluent Kafka는 데이터 스트리밍을 위해 사용됩니다. 데이터 스트리밍을 위해 빠르고 안정적인 메시징 솔루션이 필요합니다.</li>\n<li>분산 메시징 시스템: Confluent Kafka는 다양한 종류의 데이터를 처리하기 위해 분산 메시징 시스템으로 사용됩니다.</li>\n<li>데이터 인텔리전스: Confluent Kafka는 데이터 인텔리전스를 위해 사용됩니다. 데이터 인텔리전스를 위해 메시징 솔루션이 필요합니다.</li>\n</ul>\n<h2 id=\"3-java-샘플-코드\" style=\"position:relative;\"><a href=\"#3-java-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C\" aria-label=\"3 java 샘플 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Java 샘플 코드</h2>\n<p>Confluent Kafka를 사용하기 위해 Java 샘플 코드를 작성할 수 있습니다. 다음은 Java 샘플 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyKafkaProducer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Properties</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.serializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.serializer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Producer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-topic\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"4-코드-결과\" style=\"position:relative;\"><a href=\"#4-%EC%BD%94%EB%93%9C-%EA%B2%B0%EA%B3%BC\" aria-label=\"4 코드 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 코드 결과</h2>\n<p>Java 샘플 코드를 실행하면 다음과 같은 결과를 얻을 수 있습니다.</p>\n<ul>\n<li>메시징 솔루션이 정상적으로 작동합니다.</li>\n<li>메시징 솔루션이 정상적으로 데이터를 스트리밍합니다.</li>\n<li>메시징 솔루션이 다양한 종류의 데이터를 처리합니다.</li>\n</ul>\n<h2 id=\"해시태그\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C%ED%83%9C%EA%B7%B8\" aria-label=\"해시태그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시태그</h2>\n<p>#ConfluentKafka, #ApacheKafka, #DataStreaming, #DistributedMessagingSystem, #DataIntelligence, #MessagingSolution, #JavaSampleCode, #KafkaProducer, #MyTopic, #StringSerializer, #KafkaCommonSerialization, #DataProcessing, #FastMessaging, #StableDataStreaming, #DataAnalytics, #RealTimeDataProcessing, #DataIntegration, #DataManagement, #BigData, #DataStorage, #DataMining, #DataVisualization, #DataScience, #DataEngineering, #DataArchitecture, #DataGovernance, #DataSecurity, #DataAnalyticsTools</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-confluent-kafka%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EC%9E%A5%EC%A0%90%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">1. Confluent Kafka는 다음과 같은 장점을 가지고 있습니다.</a></li>\n<li><a href=\"#2-confluent-kafka%EC%9D%98-%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80\">2. Confluent Kafka의 사용 사례</a></li>\n<li><a href=\"#3-java-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C\">3. Java 샘플 코드</a></li>\n<li><a href=\"#4-%EC%BD%94%EB%93%9C-%EA%B2%B0%EA%B3%BC\">4. 코드 결과</a></li>\n<li><a href=\"#%ED%95%B4%EC%8B%9C%ED%83%9C%EA%B7%B8\">해시태그</a></li>\n</ul>\n</div>","excerpt":"1. Confluent Kafka는 다음과 같은 장점을 가지고 있습니다. 빠른 속도: Confluent Kafka는 빠른 속도로 메시징을 제공합니다. 메시징 솔루션을 사용하는 경우 빠른 속도는 중요한 요소입니다. 안정적인 데이터 스트리밍: Confluent Kafka는 데이터 스트리밍을 안정적으로 제공합니다. 데이터 스트리밍을 사용하는 경우 안정적인 솔루션이 필요합니다. 다양한 데이터 처리: Confluent Kafka는 다양한 종류의 데이터를 처리하기 위해 사용됩니다. 다양한 종류의 데이터를 처리하기 위해 메시징 시스템이 필요합니다. 2. Confluent Kafka의 사용 사례 Confluent Kafka는 다음과 같은 사용 사례가 있습니다. 데이터 스트리밍: Confluent Kafka는 데이터 스트리밍을 위해 사용됩니다. 데이터 스트리밍을 위해 빠르고 안정적인 메시징 솔루션이 필요합니다. 분산 메시징 시스템: Confluent Kafka는 다양한 종류의 데이터를 처리하기 위…","frontmatter":{"date":"April 23, 2023","title":"confluent kafka 내용 및 사용 사례","categories":"KAFKA","author":"손(Son/손민기)","emoji":"😋"},"fields":{"slug":"/2023-04-23/confluent-kafka-내용-및-사용-사례10:45:25/"}},"next":{"id":"5af3a45a-9d5e-5aff-91ae-50e19eb4a1a3","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>**Amazon Managed Streaming for Apache Kafka (Amazon MSK)**은 <strong>Apache Kafka</strong>를 관리하기 위한 <strong>AWS</strong>의 완전 관리형 서비스입니다. Amazon MSK는 <strong>Apache Kafka</strong>를 사용하여 데이터 스트리밍 솔루션을 구축하고 운영하는 데 필요한 모든 기능을 제공합니다. Amazon MSK는 사용자가 직접 관리하거나 운영할 필요가 없으며, 사용자는 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 집중할 수 있습니다.</p>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li><strong>자동화된 관리</strong>: Amazon MSK는 사용자가 직접 관리하거나 운영할 필요가 없으며, 사용자는 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 집중할 수 있습니다.</li>\n<li><strong>안정적인 성능</strong>: Amazon MSK는 사용자가 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 필요한 안정적인 성능을 제공합니다.</li>\n<li><strong>간편한 사용</strong>: Amazon MSK는 사용자가 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 필요한 간편한 사용을 제공합니다.</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li><strong>고가의 비용</strong>: Amazon MSK는 사용자가 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 필요한 비용이 높습니다.</li>\n<li><strong>고도의 전문지식</strong>: Amazon MSK는 사용자가 응용 프로그램을 실행하고 데이터를 스트리밍하는 데 필요한 고도의 전문지식이 필요합니다.</li>\n</ul>\n<h2 id=\"사용-사례\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80\" aria-label=\"사용 사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 사례</h2>\n<p>Amazon MSK는 다양한 사용 사례에 사용됩니다. 예를 들어, 다음과 같은 사용 사례가 있습니다.</p>\n<ul>\n<li><strong>데이터 스트리밍</strong>: Amazon MSK는 데이터 스트리밍 솔루션을 구축하고 운영하는 데 사용됩니다.</li>\n<li><strong>데이터 분석</strong>: Amazon MSK는 데이터 분석 솔루션을 구축하고 운영하는 데 사용됩니다.</li>\n<li><strong>데이터 저장</strong>: Amazon MSK는 데이터 저장 솔루션을 구축하고 운영하는 데 사용됩니다.</li>\n</ul>\n<h2 id=\"java-샘플-코드\" style=\"position:relative;\"><a href=\"#java-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C\" aria-label=\"java 샘플 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java 샘플 코드</h2>\n<p>다음은 Amazon MSK를 사용하는 Java 샘플 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">software<span class=\"token punctuation\">.</span>amazon<span class=\"token punctuation\">.</span>awssdk<span class=\"token punctuation\">.</span>services<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CreateClusterRequest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">software<span class=\"token punctuation\">.</span>amazon<span class=\"token punctuation\">.</span>awssdk<span class=\"token punctuation\">.</span>services<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CreateClusterResponse</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateCluster</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CreateClusterRequest</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">CreateClusterRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">clusterName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-cluster\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">CreateClusterResponse</span> response <span class=\"token operator\">=</span> kafkaClient<span class=\"token punctuation\">.</span><span class=\"token function\">createCluster</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">clusterArn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"코드-결과\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EA%B2%B0%EA%B3%BC\" aria-label=\"코드 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 결과</h2>\n<p>위의 코드를 실행하면 다음과 같은 결과가 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">arn:aws:kafka:us-east-1:123456789012:cluster/my-cluster</code></pre></div>\n<h1 id=\"해시태그\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C%ED%83%9C%EA%B7%B8\" aria-label=\"해시태그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시태그</h1>\n<p>#Kafka, #AWS, #MSK, #ApacheKafka, #AmazonMSK, #DataStreaming, #DataAnalysis, #DataStorage, #Java, #SampleCode, #CodeResult, #AutomatedManagement, #StablePerformance, #EasyToUse, #HighCost, #HighExpertise, #UseCases, #CreateCluster, #ClusterName, #ClusterARN, #ITExpert, #MarkdownFormat, #Highlights, #Bolds, #Italics, #Subheadings, #Advantages, #Disadvantages, #ApplicationExamples, #JavaSampleCode, #CodeResults, #SEOOptimized, #TargetAudience, #HumanLike, #InsertImages, #PreviousConversation</p>","frontmatter":{"date":"April 22, 2023","title":"Kafka AWS MSK 내용 및 사용 사례","categories":"KAFKA","author":"손(Son/손민기)","emoji":"🙋"},"fields":{"slug":"/2023-04-22/kafka-aws-msk-내용-및-사용-사례15:17:20/"}},"prev":{"id":"96086594-12bd-5d9d-bc4e-5a6f159a4048","html":"<h2 id=\"블로그를-왜-써야-하는지\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EC%99%9C-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%8A%94%EC%A7%80\" aria-label=\"블로그를 왜 써야 하는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블로그를 왜 써야 하는지</h2>\n<p>개발자는 기술 블로그를 통해 자신의 경험을 공유하고, 다른 개발자들과 지식을 공유하며 성장할 수 있습니다. 또한, 블로그를 운영함으로써 자신의 프로젝트나 포트폴리오를 보다 쉽게 공유하고, 개인 브랜딩에도 도움이 됩니다.</p>\n<br/>\n<blockquote>\n<p>솔직하게 광고로 얼마를 벌 수 있는지 한번 심심해서 시작했습니다. ㅎㅎㅎ…</p>\n<p>개발에 대해 살짝이라도 알고 계시면 추천 합니다!.</p>\n</blockquote>\n<br/>\n<h2 id=\"준비물이-무엇이-필요한지\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84%EB%AC%BC%EC%9D%B4-%EB%AC%B4%EC%97%87%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C%EC%A7%80\" aria-label=\"준비물이 무엇이 필요한지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비물이 무엇이 필요한지</h2>\n<p>자동화된 Git Blog를 운영하기 위해 필요한 준비물은 다음과 같습니다.</p>\n<ul>\n<li>Git 계정 및 블로그 호스팅 플랫폼 (e.g. GitHub, GitLab, Bitbucket, Gitea 등)</li>\n</ul>\n<br>\n<ul>\n<li>정적 사이트 생성기 (e.g. Jekyll, Hugo, Pelican 등)</li>\n</ul>\n<br>\n<ul>\n<li>마크다운 에디터 (e.g. Typora, Visual Studio Code 등)</li>\n</ul>\n<br>\n<ul>\n<li>자동화 스크립트 (e.g. GitHub Actions, Travis CI 등)</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">제가 세웠던 아키텍처는 GitHub Actions를 사용하여 Jekyll 기반의 정적 블로그를 자동화하는 방법입니다.\n\n1. Github blog 를 사용한다. (API 사용 할 수 있다면 어떤 블로그여도 상관없습니다.)\n\n2. 스케쥴러를 돌릴 수 있는 환경이 있어야된다. (자동으로 주제에 대해 ChatGpt 한테 써달라고 할거거든요.)\n\n3. 간단하게 실행 시킬 파일이 있어야됩니다. (Python, Node ...)\n\n간단하게 정리하면 아키텍처는 아래와 같습니다.\n\n    1. Python 을 이용해서 ChatGpt 연동 후 주제를 DB 또는 구글 시트로 모아 놓는다.\n    2. Github action 스케쥴러를 사용하여 두개의 잡을 만든다. \n        a. 주제 생성 및 겹치지 않게 관리 하는 Job\n        b. 주제에 대해 컨텐츠를 만드는 Job\n    3. 스케쥴러가 정상적으로 돈 후 Github > commit &amp; deploy 진행 시킨다. (CI/CD 구축)\n\nps.나중에 그림 추가 예정입니다. </code></pre></div>\n<h2 id=\"블로그-글을-자동화-하는방법-\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B8%80%EC%9D%84-%EC%9E%90%EB%8F%99%ED%99%94-%ED%95%98%EB%8A%94%EB%B0%A9%EB%B2%95-\" aria-label=\"블로그 글을 자동화 하는방법  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블로그 글을 자동화 하는방법 !?</h2>\n<p>블로그를 자동화하는 방법은 크게 두 가지로 나눌 수 있습니다.</p>\n<p>첫째는 정적 사이트 생성기와 Git 호스팅 플랫폼을 사용하여 블로그를 만든 뒤, Git Action과 같은 CI/CD 도구를 이용하여 컨텐츠를 자동으로 생성하고, 빌드 및 배포하는 방법입니다. 이 방법은 블로그의 구조가 정적이기 때문에 작성된 컨텐츠가 많지 않다면 좀 더 쉽게 자동화할 수 있습니다.</p>\n<p>둘째는 동적인 블로그를 만들어 서버를 통해 자동화하는 방법입니다. 이 방법은 블로그가 동적인 특성을 띄기 때문에 컨텐츠를 생성하고 배포하는 과정이 더 복잡해질 수 있습니다. 그러나 이 방법을 사용하면 블로그에 좀 더 많은 기능을 추가할 수 있으며, 블로그 운영에 있어서 더욱 유연성이 있습니다.</p>\n<p>어떤 방법을 선택하더라도 블로그를 자동화하는 것은 개발자로서의 역량을 높이는데 큰 도움이 됩니다. 컨텐츠를 생성하고, 배포하는 과정을 자동화함으로써 개발자는 좀 더 많은 시간을 개발에 집중할 수 있으며, 블로그 운영에 대한 부담을 줄일 수 있습니다.</p>\n<h3 id=\"저는-두번째-방법으로-진행할-예정입니다\" style=\"position:relative;\"><a href=\"#%EC%A0%80%EB%8A%94-%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95%EC%9C%BC%EB%A1%9C-%EC%A7%84%ED%96%89%ED%95%A0-%EC%98%88%EC%A0%95%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"저는 두번째 방법으로 진행할 예정입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>저는 두번째 방법으로 진행할 예정입니다.</strong></h3>\n<br/>\n<h3 id=\"git-blog-만드는법\" style=\"position:relative;\"><a href=\"#git-blog-%EB%A7%8C%EB%93%9C%EB%8A%94%EB%B2%95\" aria-label=\"git blog 만드는법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git blog 만드는법</h3>\n<ul>\n<li>블로그 저장소 생성 및 Jekyll 테마 적용</li>\n<li>GitHub, GitLab, Bitbucket 등의 Git 호스팅 플랫폼에서 새로운 저장소를 생성하고, Jekyll 기반의 정적 블로그 테마를 적용합니다.</li>\n<li>제 경우는 <a href=\"https://github.com/zoomKoding/zoomkoding-gatsby-blog/\">줌코딩님 Blog</a> 템플릿을 갖고와서 사용했습니다.</li>\n</ul>\n<h3 id=\"자동화-스크립트-작성\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99%ED%99%94-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"자동화 스크립트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동화 스크립트 작성</h3>\n<ul>\n<li>\n<p>GitHub Actions을 사용하여 블로그를 자동으로 빌드하고 배포하는 자동화 스크립트를 작성합니다. 이 스크립트는 블로그 저장소의 .github/workflows 디렉토리에 작성됩니다. 아래는 예시입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Auto Publish Blog Posts by 손(Son/손민기)\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0 0 * * *'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">generate-blog-post</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout Repository\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Python\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> 3.x\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cache Python packages\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.cache/pip\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>pip<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/requirements.txt')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            ${{ runner.os }}-pip-</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Required Python Packages\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        python -m pip install --upgrade pip\n        pip install gitpython\n        pip install -r requirements.txt</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate Blog Post\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">OPENAI_API_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.OPENAI_API_KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> python generate_blog_post.py\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Commit Changes\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">MY_EMAIL</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_EMAIL <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">MY_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_NAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">MY_TOKEN</span> <span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        git config --local user.email $MY_EMAIL\n        git config --local user.name $MY_NAME</span>\n\n        git remote set<span class=\"token punctuation\">-</span>url origin https<span class=\"token punctuation\">:</span>//$MY_NAME<span class=\"token punctuation\">:</span>$MY_TOKEN@github.com/smk692/smk692.github.io.git\n\n        git add .\n        git commit <span class=\"token punctuation\">-</span>m \"Add a new blog post\"\n        git push\n\n<span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> generate<span class=\"token punctuation\">-</span>blog<span class=\"token punctuation\">-</span>post\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout Repository\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> v14.17.4\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cache node modules\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.npm\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>npm<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/package-lock.json')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            ${{ runner.os }}-npm-</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Npm install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update blog\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">MY_EMAIL</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_EMAIL <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">MY_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_NAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">MY_TOKEN</span> <span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.MY_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        git config --local user.email $MY_EMAIL\n        git config --local user.name $MY_NAME</span>\n\n        git remote set<span class=\"token punctuation\">-</span>url origin https<span class=\"token punctuation\">:</span>//$MY_NAME<span class=\"token punctuation\">:</span>$MY_TOKEN@github.com/smk692/smk692.github.io.git\n\n        npm run deploy\n</code></pre></div>\n</li>\n<li>\n<p>GitHub Actions을 사용하여 블로그 컨텐츠 업데이트하는 파이썬 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ...import 부분 생략 </span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_contents</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    openai<span class=\"token punctuation\">.</span>api_key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"OPENAI_API_KEY\"</span><span class=\"token punctuation\">)</span>\n\n    prompt_contents <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''\n        </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>topic<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 대해서 자세하게 적어줘\n    '''</span></span>\n\n    contents <span class=\"token operator\">=</span> connection_chatgpt<span class=\"token punctuation\">(</span>prompt_contents<span class=\"token punctuation\">)</span>\n\n    contents <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> contents\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">connection_chatgpt</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> openai<span class=\"token punctuation\">.</span>Completion<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>\n        model<span class=\"token operator\">=</span><span class=\"token string\">\"text-davinci-003\"</span><span class=\"token punctuation\">,</span>\n        prompt<span class=\"token operator\">=</span>prompt<span class=\"token punctuation\">,</span>\n        temperature<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        max_tokens<span class=\"token operator\">=</span><span class=\"token number\">3800</span><span class=\"token punctuation\">,</span>\n        top_p<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        frequency_penalty<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n        presence_penalty<span class=\"token operator\">=</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    contents <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> choice <span class=\"token keyword\">in</span> response<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">:</span>\n        contents <span class=\"token operator\">+=</span> choice<span class=\"token punctuation\">.</span>text\n\n    <span class=\"token keyword\">return</span> contents\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_blog_post</span><span class=\"token punctuation\">(</span>topic<span class=\"token operator\">=</span> <span class=\"token string\">\"블로그 자동화!\"</span><span class=\"token punctuation\">,</span> tags<span class=\"token operator\">=</span><span class=\"token string\">\"gitblog\"</span><span class=\"token punctuation\">,</span> categories<span class=\"token operator\">=</span><span class=\"token string\">\"자동화\"</span><span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 폴더가 없으면 생성</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>directory_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>directory_path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 블로그 포스트에 사용될 메타데이터</span>\n    metadata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"---\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"layout: post\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"title: \\\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>topic<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\\"\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"date: '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>now<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"author: 손(Son/손민기)\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"tags: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>tags<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-interpolation\"><span class=\"token string\">f\"categories: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>categories<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"---\"</span>\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 블로그 포스트 파일 생성</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        \n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"블로그 포스트 파일이 생성되었습니다: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>file_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\n    topic       <span class=\"token operator\">=</span> <span class=\"token string\">\"블로그 자동화!\"</span>\n    tags        <span class=\"token operator\">=</span> <span class=\"token string\">\"gitblog\"</span>\n    categories  <span class=\"token operator\">=</span> <span class=\"token string\">\"자동화\"</span>\n\n    contents <span class=\"token operator\">=</span> generate_contents<span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">)</span>\n    pprint<span class=\"token punctuation\">.</span>pprint<span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span>\n\n    create_blog_post<span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> tags<span class=\"token punctuation\">,</span> categories<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<h2 id=\"결과물\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC%EB%AC%BC\" aria-label=\"결과물 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과물</h2>\n<ul>\n<li><img src=\"%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99%ED%99%94-%EC%9D%B4%EB%AF%B8%EC%A7%801.png\" alt=\"블로그-자동화-이미지1\"></li>\n</ul>\n<br/>\n<ul>\n<li><img src=\"%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99%ED%99%94-%EC%9D%B4%EB%AF%B8%EC%A7%802.png\" alt=\"블로그-자동화-이미지2\"></li>\n</ul>\n<br/>\n<h1 id=\"소감\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EA%B0%90\" aria-label=\"소감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소감</h1>\n<p>이상으로 블로그 자동화에 대해 알아보았습니다.</p>\n<p>자동화를 통해 개발자는 블로그 운영을 보다 효율적으로 할 수 있고, 더 많은 시간을 개발에 집중할 수 있습니다.</p>\n<p>많은 개발자분들이 이 글을 보고 자신만의 자동화된 블로그를 운영하시길 바랍니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ps. 간단하게 짠거라 필요하면 갖고 가시면 됩니다. (🥺 대신 댓글 하나만 적어주세요.)\n\n    반박 시 무조건 생각한게 맞습니다.</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EC%99%9C-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%8A%94%EC%A7%80\">블로그를 왜 써야 하는지</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A4%80%EB%B9%84%EB%AC%BC%EC%9D%B4-%EB%AC%B4%EC%97%87%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C%EC%A7%80\">준비물이 무엇이 필요한지</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B8%80%EC%9D%84-%EC%9E%90%EB%8F%99%ED%99%94-%ED%95%98%EB%8A%94%EB%B0%A9%EB%B2%95-\">블로그 글을 자동화 하는방법 !?</a></p>\n<ul>\n<li><a href=\"#%EC%A0%80%EB%8A%94-%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95%EC%9C%BC%EB%A1%9C-%EC%A7%84%ED%96%89%ED%95%A0-%EC%98%88%EC%A0%95%EC%9E%85%EB%8B%88%EB%8B%A4\"><strong>저는 두번째 방법으로 진행할 예정입니다.</strong></a></li>\n<li><a href=\"#git-blog-%EB%A7%8C%EB%93%9C%EB%8A%94%EB%B2%95\">Git blog 만드는법</a></li>\n<li><a href=\"#%EC%9E%90%EB%8F%99%ED%99%94-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\">자동화 스크립트 작성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EA%B3%BC%EB%AC%BC\">결과물</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 23, 2023","title":"Git Blog 자동화 하는법","categories":"블로그 자동화","author":"손(Son/손민기)","emoji":"💡"},"fields":{"slug":"/2023-04-24/블로그-자동화/"}},"site":{"siteMetadata":{"siteUrl":"https://smk692.github.io","comments":{"utterances":{"repo":"smk692/blog-comments"}}}}},"pageContext":{"slug":"/2023-04-23/confluent-kafka-내용-및-사용-사례10:45:25/","nextSlug":"/2023-04-22/kafka-aws-msk-내용-및-사용-사례15:17:20/","prevSlug":"/2023-04-24/블로그-자동화/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}